{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\nimport { refsTimer } from './refs';\n\nconst { input, days, hours, minutes, seconds, btnStart } = refsTimer;\n\nlet selectedEndDate = null;\nlet timerInterval = null;\n\nbtnStart.disabled = true;\n\nflatpickr(input, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(chosenDates) {\n    const date = chosenDates[0];\n\n    if (date <= new Date()) {\n      iziToast.error({\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n      });\n      btnStart.disabled = true;\n    } else {\n      selectedEndDate = date;\n      btnStart.disabled = false;\n    }\n  },\n});\n\nbtnStart.addEventListener('click', () => {\n  btnStart.disabled = true;\n  input.disabled = true;\n\n  timerInterval = setInterval(() => {\n    const timeDiff = selectedEndDate - Date.now();\n\n    if (timeDiff <= 0) {\n      clearInterval(timerInterval);\n      updateTimerDisplay(0);\n\n      input.disabled = false;\n      return;\n    }\n\n    updateTimerDisplay(timeDiff);\n  }, 1000);\n});\n\nfunction updateTimerDisplay(milliseconds) {\n  const timeObj = calculateTime(milliseconds);\n\n  days.textContent = addLeadingZero(timeObj.days);\n  hours.textContent = addLeadingZero(timeObj.hours);\n  minutes.textContent = addLeadingZero(timeObj.minutes);\n  seconds.textContent = addLeadingZero(timeObj.seconds);\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction calculateTime(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["input","days","hours","minutes","seconds","btnStart","refsTimer","selectedEndDate","timerInterval","flatpickr","chosenDates","date","iziToast","timeDiff","updateTimerDisplay","milliseconds","timeObj","calculateTime","addLeadingZero","value","ms"],"mappings":"oIAMA,KAAM,CAAE,MAAAA,EAAO,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,EAAS,SAAAC,CAAU,EAAGC,EAE3D,IAAIC,EAAkB,KAClBC,EAAgB,KAEpBH,EAAS,SAAW,GAEpBI,EAAUT,EAAO,CACf,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQU,EAAa,CACnB,MAAMC,EAAOD,EAAY,CAAC,EAEtBC,GAAQ,IAAI,MACdC,EAAS,MAAM,CACb,QAAS,qCACT,SAAU,UAClB,CAAO,EACDP,EAAS,SAAW,KAEpBE,EAAkBI,EAClBN,EAAS,SAAW,GAEvB,CACH,CAAC,EAEDA,EAAS,iBAAiB,QAAS,IAAM,CACvCA,EAAS,SAAW,GACpBL,EAAM,SAAW,GAEjBQ,EAAgB,YAAY,IAAM,CAChC,MAAMK,EAAWN,EAAkB,KAAK,IAAG,EAE3C,GAAIM,GAAY,EAAG,CACjB,cAAcL,CAAa,EAC3BM,EAAmB,CAAC,EAEpBd,EAAM,SAAW,GACjB,MACD,CAEDc,EAAmBD,CAAQ,CAC5B,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAmBC,EAAc,CACxC,MAAMC,EAAUC,EAAcF,CAAY,EAE1Cd,EAAK,YAAciB,EAAeF,EAAQ,IAAI,EAC9Cd,EAAM,YAAcgB,EAAeF,EAAQ,KAAK,EAChDb,EAAQ,YAAce,EAAeF,EAAQ,OAAO,EACpDZ,EAAQ,YAAcc,EAAeF,EAAQ,OAAO,CACtD,CAEA,SAASE,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASF,EAAcG,EAAI,CAMzB,MAAMnB,EAAO,KAAK,MAAMmB,EAAK,KAAG,EAC1BlB,EAAQ,KAAK,MAAOkB,EAAK,MAAO,IAAI,EACpCjB,EAAU,KAAK,MAAQiB,EAAK,MAAO,KAAQ,GAAM,EACjDhB,EAAU,KAAK,MAASgB,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAnB,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}